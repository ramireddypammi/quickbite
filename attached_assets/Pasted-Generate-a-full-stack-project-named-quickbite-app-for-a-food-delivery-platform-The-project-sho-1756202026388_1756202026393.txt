Generate a full-stack project named "quickbite-app" for a food delivery platform.  
The project should have a **React.js frontend**, a **Flask backend**, **MongoDB database**, **Razorpay payment integration**, and **Terraform for AWS deployment**.  
Use a clean and modular folder structure.

ðŸ“‚ Project Structure:
quickbite-app/
â”‚â”€â”€ frontend/                # React.js Frontend
â”‚   â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/      # Navbar, Footer, etc.
â”‚   â”‚   â”œâ”€â”€ pages/           # Home, Cart, Checkout, Orders
â”‚   â”‚   â”œâ”€â”€ services/        # API calls (Axios)
â”‚   â”‚   â”œâ”€â”€ App.js
â”‚   â”‚   â””â”€â”€ index.js
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ .env                 # Backend URL, Razorpay key
â”‚
â”‚â”€â”€ backend/                 # Flask Backend
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”‚   â”œâ”€â”€ auth.py
â”‚   â”‚   â”‚   â”œâ”€â”€ restaurants.py
â”‚   â”‚   â”‚   â”œâ”€â”€ menu.py
â”‚   â”‚   â”‚   â”œâ”€â”€ orders.py
â”‚   â”‚   â”‚   â””â”€â”€ payments.py   # Razorpay integration
â”‚   â”‚   â”œâ”€â”€ models/
â”‚   â”‚   â”‚   â”œâ”€â”€ user_model.py
â”‚   â”‚   â”‚   â”œâ”€â”€ order_model.py
â”‚   â”‚   â”‚   â””â”€â”€ restaurant_model.py
â”‚   â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”‚   â”œâ”€â”€ db.py         # MongoDB connection
â”‚   â”‚   â”‚   â””â”€â”€ jwt.py        # JWT Auth
â”‚   â”‚   â””â”€â”€ config.py
â”‚   â”œâ”€â”€ requirements.txt
â”‚   â”œâ”€â”€ run.py
â”‚   â””â”€â”€ .env                  # Flask secrets, Razorpay keys
â”‚
â”‚â”€â”€ terraform/               # Terraform IaC for AWS
â”‚   â”œâ”€â”€ main.tf              # EC2, ECS/EKS, VPC, IAM
â”‚   â”œâ”€â”€ variables.tf
â”‚   â”œâ”€â”€ outputs.tf
â”‚   â””â”€â”€ provider.tf
â”‚
â”‚â”€â”€ scripts/                 # Deployment scripts
â”‚   â””â”€â”€ deploy.sh
â”‚
â”‚â”€â”€ docker-compose.yml       # Local dev (React + Flask + Mongo)
â”‚â”€â”€ Dockerfile.frontend
â”‚â”€â”€ Dockerfile.backend
â”‚â”€â”€ .gitignore
â””â”€â”€ README.md

âœ¨ Requirements:
- **Frontend (React.js)** should include:
  - API service file using Axios for `/restaurants`, `/menu`, `/cart`, `/order`, `/payment`
  - Pages: Home (restaurant list), Menu, Cart, Checkout (Razorpay integration), Order tracking
  - User-friendly UI components (Material UI or Tailwind CSS)
  - `.env` for backend API URL and Razorpay Key

- **Backend (Flask)** should include:
  - Authentication routes (JWT login/signup)
  - Restaurant and menu endpoints
  - Orders handling
  - Payments integration using Razorpay (`/payment/create` and `/payment/verify`)
  - MongoDB connection utility
  - Configurable `.env` file for DB connection + Razorpay keys
  - requirements.txt (Flask, Flask-CORS, Flask-PyMongo, Flask-JWT-Extended, Razorpay)

- **Terraform** should:
  - Create a VPC, Security Group, EC2 instance (Ubuntu), S3 bucket, IAM role
  - Output public IP for backend deployment

- **Docker**:
  - Dockerfile for frontend (React build â†’ Nginx)
  - Dockerfile for backend (Flask + Gunicorn)
  - docker-compose.yml to run frontend, backend, and MongoDB locally

- **Deployment**:
  - `scripts/deploy.sh` to build and push Docker images, run Terraform apply

The output should include **ready-to-run boilerplate code** for each folder with proper imports, sample routes, and API integration stubs.
